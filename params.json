{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Bol\r\n\r\n[![Build Status](https://secure.travis-ci.org/avdgaag/bol.png?branch=master)](http://travis-ci.org/avdgaag/bol)\r\n\r\nA Ruby wrapper around the [bol.com developers API][docs], that will be made\r\navailable as a Gem. *Currently in beta stage.*\r\n\r\n[docs]: http://developers.bol.com\r\n\r\n## Getting started\r\n\r\n### Installation\r\n\r\nBol is a simple Ruby gem, so it requires a working installation of Ruby with\r\nRuby gems. Note: **Ruby 1.9 is required**. Install the gem:\r\n\r\n```\r\n$ gem install bol\r\n```\r\n\r\nOr, if your project uses [Bundler][] simply add it to your `Gemfile`:\r\n\r\n[Bundler]: http://gembundler.com\r\n\r\n```ruby\r\ngem 'bol'\r\n```\r\n\r\nThen, simply `require` it in your code, provide some configuration settings and\r\nquery away.\r\n\r\n### Configuration\r\n\r\nTo be allowed to make requests to the Bol.com API you need to register on their\r\nsite and request a access key and secret. Configure the Bol gem as follows:\r\n\r\n```ruby\r\nBol.configure do |c|\r\n  c.key = 'your public access key'\r\n  c.secret = 'your private secret'\r\n  c.per_page = 10\r\nend\r\n```\r\n\r\n### Example application\r\n\r\nSee an example Sinatra application implementing basic search-and-display \r\nfunctionality: [https://gist.github.com/1724664](https://gist.github.com/1724664).\r\nThere's [an introductory blog post](http://arjanvandergaag.nl/blog/bol-gem.html)\r\nto go with it.\r\n\r\n## Available operations\r\n\r\nHere are the currently working operations:\r\n\r\n### Loading a specific product\r\n\r\nIf you know an ID, you can load a product directly:\r\n\r\n```ruby\r\nproduct = Bol::Product.find(params[:id])\r\nproduct.title\r\nproduct.cover(:medium)\r\nproduct.referral_url('my_associate_id')\r\n```\r\n\r\n### Listing products\r\n\r\nYou can get a list of popular or bestselling products:\r\n\r\n* `Bol.top_products`\r\n* `Bol.top_products_overall`\r\n* `Bol.top_products_last_week`\r\n* `Bol.top_products_last_two_months`\r\n* `Bol.new_products`\r\n* `Bol.preorder_products`\r\n\r\nOr, you can apply a scope to limit results to a category:\r\n\r\n```ruby\r\nBol::Scope.new(params[:category_id]).top_producs\r\n```\r\n\r\n### Searching products\r\n\r\nYou can search globally for keywords or ISBN and use a Arel-like syntax\r\nfor setting options:\r\n\r\n```ruby\r\nBol.search(params[:query]).limit(10).offset(10).order('sales_ranking ASC')\r\nBol.search(params[:query]).page(params[:page])\r\n```\r\n\r\nYou can scope your search to a specific category:\r\n\r\n```ruby\r\nBol::Scope.new(params[:category_id]).search(params[:query])\r\n```\r\n\r\n### Loading categories and refinements\r\n\r\nLoading all top-level categories (e.g. `DVDs` or `English Book`) is simple\r\nenough:\r\n\r\n```ruby\r\ncategories = Bol.categories\r\ncategories.first.name # => 'Books'\r\n```\r\n\r\nYou can load subsequent subcategories:\r\n\r\n```ruby\r\nBol::Scope.new(categories.first.id).categories\r\n```\r\n\r\nRefinements (e.g. 'under 10 euros') work much the same way as categories, but\r\nare grouped under a shared name, such as group 'Price' with refinements 'up to\r\n10 euros', '10 to 20 euros', etc.:\r\n\r\n```ruby\r\ngroups = Bol.refinements\r\ngroup = groups.first\r\ngroup.name # => 'Price'\r\ngroup.refinements.first.name # => 'under 10 euros'\r\n```\r\n\r\n### Scoping operations\r\n\r\nThe `Bol::Scope` object limits results to given categories and/or refinements.\r\nYou can create a scope using explicit IDs, and you can do basic combinations:\r\n\r\n```ruby\r\nbooks = Bol::Scope.new(some_category_id)\r\ncheap = Bol::Scope.new(some_refinement_id)\r\n(books + cheap).top_products\r\n```\r\n\r\nHere's an overview of all the operations that should still be implemented:\r\n\r\n## Background\r\n\r\nThe available operations map almost directly to operations provided by the API\r\nto search, load lists of products or load a single product by ID. I do aim to\r\na add a little sugar to make working with Ruby objects a little easier:\r\n\r\n* Add `page` helper method to combine `limit` and `offset`\r\n* Scope operations by category in a ActiveRecord association style\r\n* Delay API calls until explicitly requested or triggered by looping over\r\n  results\r\n\r\n## Wishlist\r\n\r\n* Allow scoping by category or refinement objects instead of just IDs\r\n* Add a simple identiy map, so the same product does not have to be loaded\r\n  twice when requested twice\r\n* Properly differentiate between product types. Currently built around books;\r\n  DVDs, music and toys may or may not work as expected.\r\n* Add default ordering of products\r\n\r\nI do not need this stuff myself, but I will gladly take pull requests for such\r\nfeatures.\r\n\r\n## Note on Patches/Pull Requests\r\n\r\n* Fork the project.\r\n* Make your feature addition or bug fix.\r\n* Add tests for it. This is important so I don't break it in a future version\r\n  unintentionally.\r\n* Commit, do not mess with rakefile, version, or history. (if you want to have\r\n  your own version, that is fine but bump version in a commit by itself I can\r\n  ignore when I pull)\r\n* Send me a pull request. Bonus points for topic branches.\r\n\r\n## History\r\n\r\nFor a full list of changes, please see CHANGELOG.md\r\n\r\n## License\r\n\r\nCopyright (C) 2011 by Arjan van der Gaag. Published under the MIT license. See\r\nLICENSE.md for details.\r\n","name":"Bol","tagline":"A simple Ruby wrapper around the bol.com developer API","google":"UA-20357800-1"}